head	1.7;
access;
symbols;
locks
	luiza.rosa:1.7; strict;
comment	@ * @;


1.7
date	2022.01.17.00.48.29;	author luiza.rosa;	state Exp;
branches;
next	1.6;

1.6
date	2022.01.17.00.35.41;	author luiza.rosa;	state Exp;
branches;
next	1.5;

1.5
date	2022.01.16.15.25.12;	author luiza.rosa;	state Exp;
branches;
next	1.4;

1.4
date	2022.01.15.01.35.26;	author luiza.rosa;	state Exp;
branches;
next	1.3;

1.3
date	2022.01.14.01.44.25;	author luiza.rosa;	state Exp;
branches;
next	1.2;

1.2
date	2022.01.13.19.01.16;	author luiza.rosa;	state Exp;
branches;
next	1.1;

1.1
date	2022.01.13.18.06.47;	author luiza.rosa;	state Exp;
branches;
next	;


desc
@Programa: Correcao da mensagem anterior. Esse programa gera digitos verificadores para RG.
@


1.7
log
@Programa: Atualizacao da descricao.
@
text
@/*
 * Universidade Federal do Rio de Janeiro
 * Escola Politecnica
 * Departamento de Eletronica e de Computacao
 * EEL270 - Computacao II - Turma 2021/2
 * Professor: Marcelo Luiz Drumond Lanza
 *
 * Autor: Luiza Lissandra Rodrigues Rosa
 * Descricao: Implementacao das funcoes de gerar
 *			      o digito verificador do RG e validacao
 *            do RG com entradas byte.
 *
 * $Author: luiza.rosa $
 * $Date: 2022/01/17 00:35:41 $
 * $Log: aula0501.c,v $
 * Revision 1.6  2022/01/17 00:35:41  luiza.rosa
 * Programa: Atualizacao da descricao.
 *
 * Revision 1.5  2022/01/16 15:25:12  luiza.rosa
 * Programa: Insercao de melhores praticas de programacao.
 *
 * Revision 1.4  2022/01/15 01:35:26  luiza.rosa
 * Programa: Insercao de melhores praticas de programacao.
 *
 * Revision 1.3  2022/01/14 01:44:25  luiza.rosa
 * Programa: Implementacao da funcao de validar RG.
 *
 * Revision 1.2  2022/01/13 19:01:16  luiza.rosa
 * Programa: Gera os digitos verificadores do RG.
 *
*/

#include "aula0501.h"

#define COMPRIMENTO_RG								9

tipoErros
GerarDigitosVerificadoresRg (byte rg [])
{

	unsigned contador;

	byte resultado = 0,
			 peso = 2;

	for (contador = 0; contador < 8; contador++)
	{
		resultado += (peso * (rg [contador]));
		peso++;
	}

	resultado %= 11;
	resultado = 11 - resultado;
	
	rg [8] = resultado;

	return sucesso;	
		
}

tipoErros
ValidarRg (byte rg [])
{

	byte rgAnalisado [COMPRIMENTO_RG];

	unsigned indice;

	tipoErros resultado = valido;
	
	for (indice = 0; indice < (COMPRIMENTO_RG - 1); indice++)
		rgAnalisado [indice] = rg [indice];
	
  GerarDigitosVerificadoresRg (rgAnalisado);

	if (rgAnalisado [8] != rg [8])
		resultado = invalido;
	 
	return resultado;

}

/* $RCSfile: aula0501.c,v $ */
@


1.6
log
@Programa: Atualizacao da descricao.
@
text
@d11 1
a11 1
 *            do RG.
d14 1
a14 1
 * $Date: 2022/01/16 15:25:12 $
d16 3
@


1.5
log
@Programa: Insercao de melhores praticas de programacao.
@
text
@d9 3
a11 1
 * Descricao: Programa que gera o codigo verificador do RG.
d14 1
a14 1
 * $Date: 2022/01/15 01:35:26 $
d16 3
@


1.4
log
@Programa: Insercao de melhores praticas de programacao.
@
text
@d12 1
a12 1
 * $Date: 2022/01/14 01:44:25 $
d14 3
d59 1
a59 1
	unsigned indice = 0;
@


1.3
log
@Programa: ImÂplementacao da funcao de validar RG.
@
text
@d12 1
a12 1
 * $Date: 2022/01/13 19:01:16 $
d14 3
d60 1
a60 1
	for (indice = 0; indice < COMPRIMENTO_RG - 1; indice++)
d65 2
a66 3
	for (indice = 0; indice < COMPRIMENTO_RG; indice++)
		if (rgAnalisado [indice] != rg [indice])
			resultado = invalido;
@


1.2
log
@Programa: Gera os digitos verificadores do RG.
@
text
@d11 6
a16 3
 * $Author$
 * $Date$
 * $Log$
d21 2
d47 24
a70 1
/* $RCSfile$ */
@


1.1
log
@Initial revision
@
text
@d11 3
a13 6
 * $Author: luiza.rosa $
 * $Date: 2022/01/13 17:54:39 $
 * $Log: aula0501.c,v $
 * Revision 1.1  2022/01/13 17:54:39  luiza.rosa
 * Initial revision
 *
d42 1
a42 1
/* $RCSfile: aula0501.c,v $ */
@
