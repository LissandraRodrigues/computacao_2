head	1.8;
access;
symbols;
locks
	luiza.rosa:1.8; strict;
comment	@ * @;


1.8
date	2022.01.17.00.51.27;	author luiza.rosa;	state Exp;
branches;
next	1.7;

1.7
date	2022.01.17.00.38.42;	author luiza.rosa;	state Exp;
branches;
next	1.6;

1.6
date	2022.01.16.14.18.18;	author luiza.rosa;	state Exp;
branches;
next	1.5;

1.5
date	2022.01.15.01.36.35;	author luiza.rosa;	state Exp;
branches;
next	1.4;

1.4
date	2022.01.14.16.15.33;	author luiza.rosa;	state Exp;
branches;
next	1.3;

1.3
date	2022.01.14.01.43.21;	author luiza.rosa;	state Exp;
branches;
next	1.2;

1.2
date	2022.01.13.20.49.09;	author luiza.rosa;	state Exp;
branches;
next	1.1;

1.1
date	2022.01.13.17.58.28;	author luiza.rosa;	state Exp;
branches;
next	;


desc
@Programa: Arquivo de teste e tratamentos de erro da funcao de gerar digitos verificadores.
@


1.8
log
@Programa: Correcao da descricao.
@
text
@/*
 * Universidade Federal do Rio de Janeiro
 * Escola Politecnica
 * Departamento de Eletronica e de Computacao
 * EEL270 - Computacao II - Turma 2021/2
 * Professor: Marcelo Luiz Drumond Lanza
 *
 * Autor: Luiza Lissandra Rodrigues Rosa
 * Descricao: Programa de testes da funcao de
 *            Gerar Digito Verificador de RG
 *            com entrada byte e 8 argumentos.
 *
 * $Author: luiza.rosa $
 * $Date: 2022/01/17 00:38:42 $
 * $Log: aula0502a.c,v $
 * Revision 1.7  2022/01/17 00:38:42  luiza.rosa
 * Programa: Atualizacao da descricao.
 *
 * Revision 1.6  2022/01/16 14:18:18  luiza.rosa
 * Programa: Correcao da mensagem de numero invalido de argumentos.
 *
 * Revision 1.5  2022/01/15 01:36:35  luiza.rosa
 * Programa: Insercao de melhores praticas de programacao.
 *
 * Revision 1.4  2022/01/14 16:15:33  luiza.rosa
 * Programa: Insercao de melhores praticas de programacao e correcao do nome das macros.
 *
 * Revision 1.3  2022/01/14 01:43:21  luiza.rosa
 * Programa: Insercao de melhores praticas de programacao.
 *
 * Revision 1.2  2022/01/13 20:49:09  luiza.rosa
 * Programa: Insercao de melhores praticas de programacao.
 *
 * Revision 1.1  2022/01/13 17:58:28  luiza.rosa
 * Initial revision
 *
*/

#ifdef __linux__
#define _XOPEN_SOURCE 600
#endif

#if defined (__FreeBSD__) && defined (__STRICT_ANSI__)
#define __ISO_C_VISIBLE 1999
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "aula0501.h"

#define SUCESSO																		0

#define NUMERO_ARGUMENTOS_INVALIDO								1
#define QUANTIDADE_CARACTERES_INVALIDA						2
#define CARACTERE_INVALIDO												3

#define COMPRIMENTO_RG														9
#define NUMERO_ARGUMENTOS													9

int
main (int argc, char **argv) 
{
	
	byte rg [COMPRIMENTO_RG];
	unsigned contador;

	if (argc != NUMERO_ARGUMENTOS)
	{
		printf ("\nUso: %s <d1> <d2> <d3> <d4> <d5> <d6> <d7> <d8>\n\n", argv [0]);
		exit (NUMERO_ARGUMENTOS_INVALIDO);
	}

	/* Digitos */

	for (contador = 0; contador < (COMPRIMENTO_RG - 1); contador++)
	{

		if (strlen (argv [contador + 1]) != 1)
		{
			printf ("\nQuantidade de caracteres em (%s) eh invalida.\n\n", argv [contador + 1]);
			exit (QUANTIDADE_CARACTERES_INVALIDA);
		}	

		if ((argv [contador + 1][0] < '0') || (argv [contador + 1][0] > '9'))
		{
			printf ("\nO valor inserido (%s) eh invalido.\n\n", argv [contador + 1]);
			exit (CARACTERE_INVALIDO);
		}
		
		rg [contador] = (argv [contador + 1][0] - '0');	

	}
	
	/* Resultado */ 

	GerarDigitosVerificadoresRg (rg);

	printf ("\nRG: ");

	for (contador = 0; contador < (COMPRIMENTO_RG - 1); contador++)
	{

		if ((contador == 2) || (contador == 5))
			printf (".");
		
		printf ("%hhu", rg [contador]);

	}
	
	printf ("-"); 
			
	if (rg [8] == 1)
		printf ("X\n\n");
	else if (rg [8] == 11)
		printf ("0\n\n");
	else
		printf ("%hhu\n\n", rg [8]);
	
	return SUCESSO;

}

/* $RCSfile: aula0502a.c,v $ */
@


1.7
log
@Programa: Atualizacao da descricao.
@
text
@d9 1
a9 1
 * Descricao: Programa de testes do programa de
d14 1
a14 1
 * $Date: 2022/01/16 14:18:18 $
d16 3
@


1.6
log
@Programa: Correcao da mensagem de numero invalido de argumentos.
@
text
@d9 3
a11 1
 * Descricao: Programa de testes do programa de Gerar Digito Verificador de RG.
d14 1
a14 1
 * $Date: 2022/01/15 01:36:35 $
d16 3
@


1.5
log
@Programa: Insercao de melhores praticas de programacao.
@
text
@d12 1
a12 1
 * $Date: 2022/01/14 16:15:33 $
d14 3
d63 1
a63 1
		printf ("\nUso: %s <d1> <d2> <d3> <d4> <d5> <d6> <d7> <d8> <d9>\n\n", argv [0]);
@


1.4
log
@Programa: Insercao de melhores praticas de programacao e correcao do nome das macros.
@
text
@d12 1
a12 1
 * $Date: 2022/01/14 01:43:21 $
d14 3
d71 1
a71 1
			printf ("\nQuantidade de caracteres %s invalida.\n\n", argv [contador + 1]);
d91 1
a91 1
	for (contador = 0; contador < COMPRIMENTO_RG - 1; contador++)
@


1.3
log
@Programa: Insercao de melhores praticas de programacao.
@
text
@d12 1
a12 1
 * $Date: 2022/01/13 20:49:09 $
d14 3
d42 1
a42 1
#define QUANTIDADE_ARGUMENTO_INVALIDO							2
a46 1
#define EOS																				'\0'
d57 1
a57 1
		printf ("\nUso: %s <digito1> <digito2> ... <digito8>.\n\n", argv [0]);
d68 2
a69 2
			printf ("\nQuantidade de argumentos %s invalida.\n\n", argv [contador + 1]);
			exit (QUANTIDADE_ARGUMENTO_INVALIDO);
@


1.2
log
@Programa: Insercao de melhores praticas de programacao.
@
text
@d12 1
a12 1
 * $Date: 2022/01/13 17:58:28 $
d14 3
d98 6
a103 6
		if (rg [8] == 1)
			printf ("X\n\n");
		else if (rg [8] == 11)
			printf ("0\n\n");
		else
			printf ("%hhu\n\n", rg [8]);
@


1.1
log
@Initial revision
@
text
@d11 6
a16 3
 * $Author$
 * $Date$
 * $Log$
d36 2
a37 2
#define ARGUMENTO_INVALIDO												2
#define NUMERO_FORA_INTERVALO_ACEITO							3
d63 2
a64 2
			printf ("\nArgumento %s invalido.\n\n", argv [contador + 1]);
			exit (ARGUMENTO_INVALIDO);
d69 2
a70 2
			printf ("\nO valor inserido (%s) esta fora do intervalo aceito (entre 0 e 9).\n\n", argv [contador + 1]);
			exit (NUMERO_FORA_INTERVALO_ACEITO);
d106 1
a106 1
/* $RCSfile$ */
@
