head	1.4;
access;
symbols;
locks
	luiza.rosa:1.4; strict;
comment	@ * @;


1.4
date	2022.01.14.01.35.03;	author luiza.rosa;	state Exp;
branches;
next	1.3;

1.3
date	2022.01.07.13.56.46;	author luiza.rosa;	state Exp;
branches;
next	1.2;

1.2
date	2022.01.06.19.59.46;	author luiza.rosa;	state Exp;
branches;
next	1.1;

1.1
date	2022.01.06.19.07.50;	author luiza.rosa;	state Exp;
branches;
next	;


desc
@Programa: Arquivo de testes e tratamento de erros do programa da funcao calcular Serie Harmonica Alternada.
@


1.4
log
@Programa: Correcao de um erro, a variavel termo não estava sendo inicializada.
@
text
@/*
 * Universidade Federal do Rio de Janeiro
 * Escola Politecnica
 * Departamento de Eletronica e de Computacao
 * EEL270 - Computacao II - Turma 2021/2
 * Professor: Marcelo Luiz Drumond Lanza
 *
 * Autor: Luiza Lissandra Rodrigues Rosa
 * Descricao: Programa de testes do programa de Calcular Serie Harmonica Alternada.
 *
 * $Author: luiza.rosa $
 * $Date: 2022/01/07 13:56:46 $
 * $Log: aula0404.c,v $
 * Revision 1.3  2022/01/07 13:56:46  luiza.rosa
 * Programa: Refatoracao do codigo e insercao de melhores praticas de programacao.
 *
 * Revision 1.2  2022/01/06 19:59:46  luiza.rosa
 * Programa: Insercao e correcao de tratamento de erros.
 *
 * Revision 1.1  2022/01/06 19:07:50  luiza.rosa
 * Initial revision
 *
*/

#ifdef __linux__
#define _XOPEN_SOURCE 600
#endif

#if defined (__FreeBSD__) && defined (__STRICT_ANSI__)
#define __ISO_C_VISIBLE 1999
#endif

#include <stdio.h>
#include <stdlib.h>
#include <float.h>

#include "aula0401.h"

#define SUCESSO																		0

#define NUMERO_ARGUMENTOS_INVALIDO								1
#define ARGUMENTO_INVALIDO												2
#define ARGUMENTO_CONTEM_CARACTERE_INVALIDO				3
#define VALOR_FORA_DO_INTERVALO										4
 
#define NUMERO_ARGUMENTOS													2
#define EOS																				'\0'

int
main (int argc, char *argv []) 
{

	char *verificacao;
					
	unsigned short int termo = 0;

	float percentual,
				serieHarmonica1,
			  serieHarmonica2 = 0,
			  auxiliar = 0;
	
	/* Tratamento de Erros */
	
	if (argc != NUMERO_ARGUMENTOS)
	{
		printf ("\nUso: %s <unsigned-short-int>.\n\n", argv [0]);
		exit (NUMERO_ARGUMENTOS_INVALIDO);
	}

	percentual = strtof (argv [1], &verificacao);

	if (*verificacao != EOS)
	{
		printf ("\nO argumento contem caractere invalido.\n");
		printf ("Primeiro caractere invalido: \'%c\'.\n\n", *verificacao);
		exit (ARGUMENTO_CONTEM_CARACTERE_INVALIDO);
	}

	if ((percentual < 0) || (percentual > 1))  
	{
		printf ("\nEste programa só aceita valores entre 0 e 1.\n\n");
		exit (VALOR_FORA_DO_INTERVALO);
	}

	/* Calcular Serie Harmonica Alternada */ 

	printf ("\nSerie Harmonica Alternada\n\n");
	
	while (auxiliar > (percentual * serieHarmonica2) || serieHarmonica2 == 0)
	{
	
		serieHarmonica2 = serieHarmonica1;
		serieHarmonica1 = CalcularSerieHarmonicaAlternada (termo);	

		printf ("S(%hu) = %.10f\n\n", termo, serieHarmonica1);
			
		termo++;

		if ((serieHarmonica1 - serieHarmonica2) > 0)
			auxiliar = serieHarmonica1 - serieHarmonica2;
		else
			auxiliar = serieHarmonica2 - serieHarmonica1;
	}

	return SUCESSO;

}

/* $RCSfile: aula0404.c,v $ */
@


1.3
log
@Programa: Refatoracao do codigo e insercao de melhores praticas de programacao.
@
text
@d12 1
a12 1
 * $Date: 2022/01/06 19:59:46 $
d14 3
d55 1
a55 1
	unsigned short int termo;
@


1.2
log
@Programa: Insercao e correcao de tratamento de erros.
@
text
@d12 1
a12 1
 * $Date: 2022/01/06 19:07:50 $
d14 3
d41 1
a41 1
#define VALOR_MAXIMO_FLOAT_EXCEDIDO								4
d51 2
d54 4
a57 6
	unsigned short int termo = 0;

	float	percentual,
				serieHarmonica1 = 0,
				serieHarmonica2 = 0,
				auxiliarHarmonico = 0;	
d67 1
a67 5
	if (argv[1][0] == '-')
	{
		printf ("\nEste programa nao aceita numeros negativos.\n\n");
		exit (ARGUMENTO_INVALIDO);
	}
a68 2
	percentual = strtof (argv [1], &verificacao);
	
d76 1
a76 1
	if (percentual > FLT_MAX) 
d78 2
a79 3
		printf ("\nO valor fornecido ultrapassa o maximo permitido para float (%f).\n\n",
						FLT_MAX);
		exit (VALOR_MAXIMO_FLOAT_EXCEDIDO);
d81 1
a81 1
	
d85 2
a86 2

	while ((auxiliarHarmonico > (percentual * serieHarmonica2)) || (!serieHarmonica2)) 
d88 1
a88 1

d90 1
a90 1
		serieHarmonica1 = CalcularSerieHarmonicaAlternada (termo);
d92 2
a93 2
		printf ("S(%hu) = %.10f\n", termo, serieHarmonica1);
		
d95 1
a95 2
		
		/* Modulo */
d97 3
a99 4
			auxiliarHarmonico = serieHarmonica1 - serieHarmonica2;
		else 
			auxiliarHarmonico = serieHarmonica2 - serieHarmonica1;
		
a100 2
	
	printf ("\nValor maximo da funcao foi alcancado.\n\n");
@


1.1
log
@Initial revision
@
text
@d11 6
a16 3
 * $Author$
 * $Date$
 * $Log$
a28 1
#include <limits.h>
a29 1
#include <errno.h>
d38 1
a38 2
#define BASE_INVALIDA															4
#define VALOR_MAXIMO_FLOAT_EXCEDIDO								5
d64 6
d114 1
a114 1
/* $RCSfile$ */
@
